<?php

namespace App\Models;

use App\Models\Scopes\FilterBySchoolScope;
use App\Traits\FilterBySchool;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class SubjectCourse extends Model
{
    use HasFactory, FilterBySchool;

    protected $table = 'subject_course';

    protected $appends = [''];

    static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new FilterBySchoolScope());
    }

    protected $fillable = [
        'school_id', 'course_no', 'title', 'description', 'topics', 'course_format',
        'delivery_method_id', 'study_option_id',
        'requisites', 'requirements', 'learning_outcomes',
        'learning_objectives', 'pass_mark', 'maximum_times_to_take', 'prerequisites',
        'credit_accreditable', 'credit_transferable', 'report_progress',
        'offer_to_id', 'vip_dates', 'tuition_id', 'policy', 'registration_note',
        'duration',
        'important_information', 'status', 'number_of_credits', 'created_by', 'created_at', 'updated_by',
    ];

    public function scopeWhereActive()
    {
        return $this->where('status', 1);
    }

    static function getForDropdown()
    {
        return static::select(DB::raw("CONCAT(`course_no`, '  [  ', `title`, '  ]') as CT"), 'id')
            ->pluck('CT', 'id');
    }

    function textbooks()
    {
        return $this->belongsToMany(Textbook::class, 'subject_course_text_books', 'course_id', 'book_id')
            ->withPivot(['mandatory']);
    }

    function gradeScales()
    {
        return $this->hasMany(CourseAssessmentGradeScale::class, 'course_id');
    }

    function deliveryMethod()
    {
        return $this->belongsTo(DeliveryMethod::class, 'delivery_method_id');
    }

    function studyOption()
    {
        return $this->belongsTo(StudyOption::class, 'study_option_id');
    }

    function studentType()
    {
        return $this->belongsTo(StudentType::class, 'student_type_id');
    }

    function tuition()
    {
        return $this->belongsTo(StudentType::class, 'tuition_id');
    }

    //get students of  course outlines using course table
    //exists in student courses
    public function students()
    {
        return $this->belongsToMany(User::class, 'student_courses', 'course_id', 'student_id');
    }

    public function classes(){
        return $this->hasMany(SchoolClass::class, 'subject_course_id');
    }

}
